version: "3.7"

networks:
  kong-fc:
    external: false
    ipam:
      config:
        - subnet: 192.168.0.0/16
  keycloak:
      external: false

volumes:
  postgres_data:
    driver: local
  kong_postgres_data:
    driver: local

services:

  ###
  ### Banco de dados
  ### Nesse momento estamos usando o modelo de deployment com banco de dados, o que indica
  ### que as configuracoes a.k.a rotas,servicos e plugins ficam persistidas nele
  ###
  kong-database:
    image: postgres:14.5
    volumes:
      - kong_postgres_data:/var/lib/postgresql/data
#    deploy:
#      restart_policy:
#        condition: on-failure
    networks:
      - kong-fc
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  ###
  ### Inicio do banco de dados
  ### Esse container ira realizar as criacoes iniciais das tabelas necessarias para
  ### armazenamento das configuracoes do Kong
  ###
  kong-migration-bootstrap:
    build:
      context: ./kong
#    deploy:
#      restart_policy:
#        condition: on-failure
    networks:
      - kong-fc
    depends_on:
      - kong-database
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
    command: kong migrations bootstrap

  ###
  ### Inicio do banco de dados
  ### Esse container ira realizar as configuracoes iniciais das tabelas necessarias para
  ### armazenamento das configuracoes do Kong
  ###
  kong-migration-up:
    build:
      context: ./kong
    networks:
      - kong-fc
#    deploy:
#      restart_policy:
#        condition: on-failure
    depends_on:
      - kong-database
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
    command: kong migrations up

  ###
  ### Kong API Gateway
  ### Container com o runtime do Kong API Gateway
  ###
  kong:
    container_name: kong
    build:
      context: ./kong
    networks:
      - kong-fc
#    deploy:
#      restart_policy:
#        condition: on-failure
    volumes:
      - ./nginx/hosts:/etc/hosts
    depends_on:
      - kong-database
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_DATABASE=kong
      - KONG_PG_PASSWORD=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
      - KONG_PROXY_LISTEN=0.0.0.0:8000, 0.0.0.0:8443 ssl http2
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_REAL_IP_RECURSIVE=on
      - KONG_NGINX_HTTP_RESOLVER=8.8.8.8
      - KONG_PLUGINS=bundled,oidc,kong-jwt2header
    ports:
      - "81:8000"
      - "443:8443"
      - "8001:8001"
    healthcheck:
      test: ["CMD", "wget", "-O-", "http://kong:8001/status"]
      interval: 5s
      retries: 10
    restart: on-failure


  postgres:
    image: postgres:14.5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    networks:
      - kong-fc
      - keycloak

  keycloak:
    image: quay.io/keycloak/keycloak:legacy
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - kong-fc
      - keycloak

  ###
  ### Konga
  ### Administracao via interface grafica do Kong API Gateway
  ###
  konga:
    image: pantsel/konga
    volumes:
      - ./nginx/hosts:/etc/hosts
    networks:
      - kong-fc
#    deploy:
#      restart_policy:
#        condition: on-failure
    depends_on:
      - kong-database
    environment:
      NODE_ENV: development
    ports:
      - "1337:1337"

  php:
    build:
      context: ./php
    volumes:
      - ${PWD}/../laraveltest:/var/www/html
    ports:
      - "9000:9000"
    networks:
      - kong-fc

  composer:
    build:
      context: ./php
    volumes:
      - ${PWD}/../laraveltest:/var/www/html
    entrypoint: composer

  artisan:
    build:
      context: ./php
    volumes:
      - ${PWD}/../laraveltest:/var/www/html
    entrypoint: php artisan

  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
    volumes:
      - ${PWD}/../laraveltest:/var/www/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
    networks:
      kong-fc:
        ipv4_address: 192.168.0.9

