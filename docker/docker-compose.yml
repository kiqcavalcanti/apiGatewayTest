version: "3.7"

networks:
  kong-fc:
    external: false
    ipam:
      config:
        - subnet: 192.168.0.0/16
  keycloak:
    external: false
  test:


volumes:
  postgres_data:
    driver: local
  kong_postgres_data:
    driver: local

services:

  ###
  ### Banco de dados
  ### Nesse momento estamos usando o modelo de deployment com banco de dados, o que indica
  ### que as configuracoes a.k.a rotas,servicos e plugins ficam persistidas nele
  ###
  kong-database:
    image: postgres:14.5
    volumes:
      - kong_postgres_data:/var/lib/postgresql/data
#    deploy:
#      restart_policy:
#        condition: on-failure
    networks:
      - kong-fc
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  ###
  ### Inicio do banco de dados
  ### Esse container ira realizar as criacoes iniciais das tabelas necessarias para
  ### armazenamento das configuracoes do Kong
  ###
  kong-migration-bootstrap:
    build:
      context: ./kong
#    deploy:
#      restart_policy:
#        condition: on-failure
    networks:
      - kong-fc
    depends_on:
      - kong-database
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
    command: kong migrations bootstrap

  ###
  ### Inicio do banco de dados
  ### Esse container ira realizar as configuracoes iniciais das tabelas necessarias para
  ### armazenamento das configuracoes do Kong
  ###
  kong-migration-up:
    build:
      context: ./kong
    networks:
      - kong-fc
#    deploy:
#      restart_policy:
#        condition: on-failure
    depends_on:
      - kong-database
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
    command: kong migrations up

  ###
  ### Kong API Gateway
  ### Container com o runtime do Kong API Gateway
  ###
  kong:
    container_name: kong
    build:
      context: ./kong
    networks:
      - kong-fc
#    deploy:
#      restart_policy:
#        condition: on-failure
    volumes:
      - ./nginx/hosts:/etc/hosts
    depends_on:
      - kong-database
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_DATABASE=kong
      - KONG_PG_PASSWORD=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
      - KONG_PROXY_LISTEN=0.0.0.0:8000, 0.0.0.0:8443 ssl http2
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_REAL_IP_RECURSIVE=on
      - KONG_NGINX_HTTP_RESOLVER=8.8.8.8
      - KONG_PLUGINS=bundled,oidc,kong-jwt2header
    ports:
      - "81:8000"
      - "443:8443"
      - "8001:8001"
    healthcheck:
      test: ["CMD", "wget", "-O-", "http://kong:8001/status"]
      interval: 5s
      retries: 10
    restart: on-failure
    extra_hosts:
      - "host.docker.internal:host-gateway"


  postgres:
    image: postgres:14.5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    networks:
      keycloak:
      kong-fc:
        ipv4_address: 192.168.0.55
    ports:
      - "5432:5432"
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"


  keycloak:
    image: quay.io/keycloak/keycloak:20.0.1
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: 12qwaszx
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - kong-fc
      - keycloak
    command:
      - start-dev

  ###
  ### Konga
  ### Administracao via interface grafica do Kong API Gateway
  ###
  konga:
    image: pantsel/konga
    volumes:
      - ./nginx/hosts:/etc/hosts
    networks:
      - kong-fc
#    deploy:
#      restart_policy:
#        condition: on-failure
    depends_on:
      - kong-database
    environment:
      NODE_ENV: development
    ports:
      - "1337:1337"
    extra_hosts:
      - "host.docker.internal:host-gateway"

#  php:
#    build:
#      context: ./php
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
#    volumes:
#      - ${PWD}/../laraveltest:/var/www/html
#    networks:
#      - kong-fc
#      - test

#  composer:
#    build:
#      context: ./php
#    volumes:
#      - ${PWD}/../laraveltest:/var/www/html
#    entrypoint: composer
#    command:
#      - list
#
#  artisan:
#    build:
#      context: ./php
#    volumes:
#      - ${PWD}/../laraveltest:/var/www/html
#    entrypoint: php artisan
#    command:
#      - list

  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      kong-fc:
        ipv4_address: 192.168.0.40
    extra_hosts:
      - "host.docker.internal:host-gateway"

  docdrive-db:
    container_name: docdrive-db
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: doc88user
      MONGO_INITDB_ROOT_PASSWORD: whh3ji14
    ports:
      - "27017:27017"
    volumes:
      - ./mongodb-data:/data/db
    networks:
      - kong-fc

  docdrive-app:
    container_name: docdrive-app
    build:
      context: ./node
      dockerfile: Dockerfile
    volumes:
      - ${PWD}/../docdrive:/app
    ports:
      - "8082:8082"
    depends_on:
      - docdrive-db
    networks:
      - kong-fc

  docdrive-yarn:
    build:
      context: ./node
    volumes:
      - ${PWD}/../docdrive:/app
    entrypoint: yarn

  docdrive-front-yarn:
    build:
      context: ./node
    volumes:
      - ${PWD}/../docdrive-front:/app
    entrypoint: yarn

  docdrive-front:
    container_name: docdrive-front
    build:
      context: ./node
      dockerfile: Dockerfile
    volumes:
      - ${PWD}/../docdrive-front:/app
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "3000:3000"
    depends_on:
      -  docdrive-front-yarn
    networks:
      - kong-fc

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kong-fc

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://host.docker.internal:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    networks:
      - kong-fc

  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:6.0.0
    container_name: kafka-connect-1
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      # # Optional settings to include to support Confluent Control Center
      #   CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      #   CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      #  ---------------
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
    # If you want to use the Confluent Hub installer to d/l component, but make them available
    # when running this offline, spin up the stack once and then run :
    #   docker cp kafka-connect:/usr/share/confluent-hub-components ./data/connect-jars
    volumes:
      - $PWD/data:/data
      - ./kafka-connect/mysql-connector-java.jar:/usr/share/java/kafka/mysql-connector-java.jar
    # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:1.9.7
        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:1.8.1
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.6.0
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    networks:
      - kong-fc
  control-center:
    image: confluentinc/cp-enterprise-control-center:6.0.1
    hostname: control-center
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_CONNECT_CLUSTER: http://kafka-connect:8083
      PORT: 9021
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    networks:
      - kong-fc
  mysql:
    image: wesleywillians/mysql-kafka-connect:latest
    command: --innodb-use-native-aio=0
    tty: true
    restart: always
    ports:
      - "3306:3306"
    environment:
      - MYSQL_DATABASE=default
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=default
      - MYSQL_PASSWORD=default
      - TZ=America/Sao_Paulo
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    networks:
      - kong-fc

  mysql2:
    image: mysql:5.7
    tty: true
    environment:
      - MYSQL_DATABASE=default
      - MYSQL_ROOT_PASSWORD=root
    networks:
      - kong-fc
    ports:
      - "3307:3306"

  mysql3:
    image: mysql:latest
    tty: true
    environment:
      - MYSQL_DATABASE=default
      - MYSQL_ROOT_PASSWORD=root
    networks:
      - kong-fc
    ports:
      - "3308:3306"

  schema-registry:
    image: confluentinc/cp-schema-registry:6.0.0
    depends_on:
     - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081